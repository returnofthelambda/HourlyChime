name: Build Wear OS Hourly Chime App

# This section defines when the workflow will run.
# In this case, it triggers on every 'push' to the 'main' branch.
on:
  push:
    branches: [ "master" ]

# This section defines the actual jobs to be run.
jobs:
  build:
    # The type of virtual machine to run the job on. 'ubuntu-latest' is the standard.
    runs-on: ubuntu-latest

    # The sequence of steps that make up the job.
    steps:
      # Step 1: Check out your repository's code so the workflow can access it.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up the Java Development Kit (JDK), which is required by Gradle.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Cache Gradle dependencies to speed up future builds.
      # The first build will be slow, but subsequent builds will be much faster.
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Make the Gradle Wrapper script executable.
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Step 5: Run the build command to compile the app and create the debug APK.
      - name: Build with Gradle
        run: ./gradlew assembleDebug

      # Step 6: Upload the generated APK as a build artifact.
      # This makes the APK file available for download after the workflow is complete.
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: hourly-chime-apk
          path: app/build/outputs/apk/debug/app-debug.apk

